#include <iostream>

    using namespace std;
    
    class Node {
    public:
        int data;
        Node* prev;
        Node* next;
    
        Node(int data) {
            this->data = data;
            this->prev = nullptr;
            this->next = nullptr;
        }
    };
    
    class DoublyLinkedList {
    public:
        Node* head;
    
        DoublyLinkedList() {
            this->head = nullptr;
        }
    
        void append(int data) {
            Node* new_node = new Node(data);
            if (this->head == nullptr) {
                this->head = new_node;
            } else {
                Node* current_node = this->head;
                while (current_node->next != nullptr) {
                    current_node = current_node->next;
                }
                current_node->next = new_node;
                new_node->prev = current_node;
            }
        }
    
        void prepend(int data) {
            Node* new_node = new Node(data);
            if (this->head == nullptr) {
                this->head = new_node;
            } else {
                this->head->prev = new_node;
                new_node->next = this->head;
                this->head = new_node;
            }
        }
    
        void print_list() {
            Node* current_node = this->head;
            while (current_node != nullptr) {
                cout << current_node->data << endl;
                current_node = current_node->next;
            }
        }

        void display() {
        Node* current = head;
        while (current != nullptr) {
            std::cout << current->data << " ";
            current = current->next;
        }
        std::cout << std::endl;
    }
    };
    
    int main() {
        DoublyLinkedList list;
        list.append(1);
        list.append(2);
        list.append(3);
        list.prepend(0);
        list.print_list();
        return 0;
    }
